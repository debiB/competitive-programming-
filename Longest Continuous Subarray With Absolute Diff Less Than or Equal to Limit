class Solution {
    public int longestSubarray(int[] nums, int limit) {
        ArrayDeque<Integer> maxQ = new ArrayDeque<>(); 
        ArrayDeque<Integer> minQ = new ArrayDeque<>();
        int best = 0;
        int left = 0;
        for(int right = 0; right < nums.length; right++){
            while(!maxQ.isEmpty() && nums[right] > nums[maxQ.peekLast()]){
                maxQ.removeLast();
            }
            maxQ.offerLast(right);
            
            while(!minQ.isEmpty() && nums[right] < nums[minQ.peekLast()]){
                minQ.removeLast();
            }
            minQ.offerLast(right);
            
            
            while(nums[maxQ.peekFirst()] - nums[minQ.peekFirst()] > limit){
                if(maxQ.peekFirst() <= left){
                    maxQ.removeFirst();
                }
                if(minQ.peekFirst() <= left){
                    minQ.removeFirst();
                }
                left++;
            }
            best = Math.max(best, right - left + 1);
        }
        return best;
    }
}
